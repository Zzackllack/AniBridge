"""Initial migration with existing schema

Revision ID: 397fa0304f9f
Revises: 
Create Date: 2025-10-22 00:12:31.693517

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '397fa0304f9f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clienttask',
    sa.Column('hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('season', sa.Integer(), nullable=False),
    sa.Column('episode', sa.Integer(), nullable=False),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('site', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('job_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('save_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('added_on', sa.DateTime(), nullable=False),
    sa.Column('completion_on', sa.DateTime(), nullable=True),
    sa.Column('state', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('hash')
    )
    with op.batch_alter_table('clienttask', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_clienttask_added_on'), ['added_on'], unique=False)
        batch_op.create_index(batch_op.f('ix_clienttask_hash'), ['hash'], unique=False)
        batch_op.create_index(batch_op.f('ix_clienttask_job_id'), ['job_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_clienttask_site'), ['site'], unique=False)
        batch_op.create_index(batch_op.f('ix_clienttask_state'), ['state'], unique=False)

    op.create_table('episodeavailability',
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('season', sa.Integer(), nullable=False),
    sa.Column('episode', sa.Integer(), nullable=False),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('site', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('available', sa.Boolean(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('vcodec', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('provider', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('checked_at', sa.DateTime(), nullable=False),
    sa.Column('extra', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('slug', 'season', 'episode', 'language', 'site')
    )
    with op.batch_alter_table('episodeavailability', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_episodeavailability_checked_at'), ['checked_at'], unique=False)

    op.create_table('job',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('downloaded_bytes', sa.Integer(), nullable=False),
    sa.Column('total_bytes', sa.Integer(), nullable=True),
    sa.Column('speed', sa.Float(), nullable=True),
    sa.Column('eta', sa.Integer(), nullable=True),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('result_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('source_site', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_job_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_job_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_job_source_site'), ['source_site'], unique=False)
        batch_op.create_index(batch_op.f('ix_job_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_job_updated_at'), ['updated_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_job_updated_at'))
        batch_op.drop_index(batch_op.f('ix_job_status'))
        batch_op.drop_index(batch_op.f('ix_job_source_site'))
        batch_op.drop_index(batch_op.f('ix_job_id'))
        batch_op.drop_index(batch_op.f('ix_job_created_at'))

    op.drop_table('job')
    with op.batch_alter_table('episodeavailability', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_episodeavailability_checked_at'))

    op.drop_table('episodeavailability')
    with op.batch_alter_table('clienttask', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_clienttask_state'))
        batch_op.drop_index(batch_op.f('ix_clienttask_site'))
        batch_op.drop_index(batch_op.f('ix_clienttask_job_id'))
        batch_op.drop_index(batch_op.f('ix_clienttask_hash'))
        batch_op.drop_index(batch_op.f('ix_clienttask_added_on'))

    op.drop_table('clienttask')
    # ### end Alembic commands ###
