name: Build Release Artifacts
permissions:
  contents: read

on:
  push:
    tags:
      - "v*"

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare-release-context:
    name: Prepare Commit Context For LLM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve release tag range
        id: tags
        shell: bash
        run: |
          set -euo pipefail

          current="${GITHUB_REF_NAME:-${GITHUB_REF#refs/tags/}}"
          if [[ -z "${current}" ]]; then
            echo "Unable to resolve current tag from workflow context." >&2
            exit 1
          fi

          previous="$(git tag --sort=-creatordate | grep -E '^v' | grep -vxF "${current}" | head -n 1 || true)"

          echo "current_tag=${current}" >> "${GITHUB_OUTPUT}"
          echo "previous_tag=${previous}" >> "${GITHUB_OUTPUT}"

      - name: Generate commit context artifacts
        env:
          CURRENT_TAG: ${{ steps.tags.outputs.current_tag }}
          PREVIOUS_TAG: ${{ steps.tags.outputs.previous_tag }}
        run: |
          set -euo pipefail

          args=(--current-tag "${CURRENT_TAG}" --output-dir ".")
          if [[ -n "${PREVIOUS_TAG}" ]]; then
            args+=(--previous-tag "${PREVIOUS_TAG}")
          fi

          python scripts/release/generate_commit_context.py "${args[@]}"

      - name: Upload commit context artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-commit-context
          path: |
            commit_context.json
            llm_release_context.md
          retention-days: 7

  generate-release-notes:
    name: Generate Release Notes With Gemini
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: prepare-release-context
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - name: Download commit context artifact
        uses: actions/download-artifact@v4
        with:
          name: release-commit-context
          path: release-context

      - name: Call Gemini to craft release notes
        run: |
          set -euo pipefail

          if [ -z "${GEMINI_API_KEY:-}" ]; then
            echo "GEMINI_API_KEY secret is required to generate release notes." >&2
            exit 1
          fi

          python scripts/release/generate_release_notes.py \
            --context-json release-context/commit_context.json \
            --output release-notes/release-notes.md

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 7

  build-python-dists:
    runs-on: ubuntu-latest
    needs: generate-release-notes
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: release-notes
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install build tools
        run: python -m pip install --upgrade pip build
      - name: Build distributions
        run: python -m build
      - name: Create checksums
        run: |
          cd dist && sha256sum * > SHA256SUMS
      - name: Upload Python dists
        uses: softprops/action-gh-release@v1
        with:
          files: "dist/*"
          body_path: release-notes/release-notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pyinstaller-builds:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Build single-file binary (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --additional-hooks-dir hooks --onefile app/main.py --name anibridge
          mkdir -p artifacts
          mv dist/anibridge artifacts/ || true

      - name: Package artifact (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          version=$(cat VERSION | tr -d ' \n\r')
          tar -czf release/anibridge-${{ matrix.os }}-${version}.tar.gz -C artifacts . || true
          ls -la release || true

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Build single-file binary (windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pyinstaller --additional-hooks-dir hooks --onefile app\main.py --name anibridge.exe
          New-Item -ItemType Directory -Force -Path artifacts
          Move-Item -Path dist\anibridge.exe -Destination artifacts\anibridge.exe -ErrorAction SilentlyContinue

      - name: Package artifact (windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          $v = (Get-Content VERSION -Raw).Trim()
          Compress-Archive -Path artifacts\* -DestinationPath (Join-Path -Path release -ChildPath "anibridge-windows-$v.zip") -Force
          Get-ChildItem release
      - name: Upload binaries
        uses: softprops/action-gh-release@v1
        with:
          files: "release/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
