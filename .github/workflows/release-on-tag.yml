name: Build Release Artifacts
permissions:
  contents: read

on:
  push:
    tags:
      - "v*"

jobs:
  prepare-release-context:
    name: Prepare Commit Context For LLM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve release tag range
        id: tags
        shell: bash
        run: |
          set -euo pipefail

          current="${GITHUB_REF_NAME:-${GITHUB_REF#refs/tags/}}"
          if [[ -z "${current}" ]]; then
            echo "Unable to resolve current tag from workflow context." >&2
            exit 1
          fi

          previous="$(git tag --sort=-creatordate | grep -E '^v' | grep -vxF "${current}" | head -n 1 || true)"

          echo "current_tag=${current}" >> "${GITHUB_OUTPUT}"
          echo "previous_tag=${previous}" >> "${GITHUB_OUTPUT}"

      - name: Generate commit context artifacts
        env:
          CURRENT_TAG: ${{ steps.tags.outputs.current_tag }}
          PREVIOUS_TAG: ${{ steps.tags.outputs.previous_tag }}
        run: |
          set -euo pipefail

          python - <<'PY'
          import json
          import os
          import subprocess
          from pathlib import Path

          current_tag = os.environ["CURRENT_TAG"]
          previous_tag = os.environ.get("PREVIOUS_TAG") or ""

          if previous_tag:
              log_range = f"{previous_tag}..{current_tag}"
          else:
              log_range = current_tag

          pretty = "%H%x00%h%x00%an%x00%ae%x00%cI%x00%s%x00%b%x1e"
          try:
              log_output = subprocess.check_output(
                  ["git", "log", "--reverse", f"--pretty=format:{pretty}", log_range],
                  text=True,
              )
          except subprocess.CalledProcessError as exc:
              raise SystemExit(f"git log failed for range '{log_range}': {exc}") from exc

          entries = []
          for chunk in log_output.strip().split("\x1e"):
              if not chunk.strip():
                  continue
              parts = chunk.split("\x00")
              if len(parts) != 7:
                  continue
              commit, abbrev, author_name, author_email, authored_iso, subject, body = parts
              entries.append(
                  {
                      "commit": commit,
                      "abbrev": abbrev,
                      "subject": subject.strip(),
                      "body": body.strip(),
                      "author": {
                          "name": author_name.strip(),
                          "email": author_email.strip(),
                      },
                      "date": authored_iso.strip(),
                  }
              )

          context = {
              "current_tag": current_tag,
              "previous_tag": previous_tag or None,
              "commit_count": len(entries),
              "commits": entries,
          }

          Path("commit_context.json").write_text(
              json.dumps(context, indent=2) + "\n",
              encoding="utf-8",
          )

          lines = [
              "# Release Commit Context",
              "",
              f"- Current tag: {current_tag}",
              f"- Previous tag: {previous_tag or '(none â€” initial release)'}",
              f"- Commit count: {len(entries)}",
          ]

          if entries:
              lines.append("")
              lines.append("## Commits")
              lines.append("")
              for entry in entries:
                  lines.append(f"- `{entry['abbrev']}` {entry['subject']}")
                  lines.append(f"  Author: {entry['author']['name']} <{entry['author']['email']}>")
                  lines.append(f"  Date: {entry['date']}")
                  if entry["body"]:
                      lines.append("  Message:")
                      for body_line in entry["body"].splitlines():
                          lines.append(f"    {body_line}")
                  lines.append("")
          else:
              lines.append("")
              lines.append("No commits found for the selected range.")

          Path("llm_release_context.md").write_text("\n".join(lines).rstrip() + "\n", encoding="utf-8")
          PY

      - name: Upload commit context artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-commit-context
          path: |
            commit_context.json
            llm_release_context.md
            retention-days: 7

  generate-release-notes:
    name: Generate Release Notes With Gemini
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: prepare-release-context
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - name: Download commit context artifact
        uses: actions/download-artifact@v4
        with:
          name: release-commit-context
          path: release-context

      - name: Call Gemini to craft release notes
        run: |
          set -euo pipefail

          if [ -z "${GEMINI_API_KEY:-}" ]; then
            echo "GEMINI_API_KEY secret is required to generate release notes." >&2
            exit 1
          fi

          python - <<'PY'
            import json
            import os
            import textwrap
            import urllib.request
            REPO_URL = f"https://github.com/{os.environ['GITHUB_REPOSITORY']}"

            REPO_URL = "https://github.com/Zzackllack/AniBridge"
            CONTEXT_PATH = Path("release-context/commit_context.json")
            OUTPUT_PATH = Path("release-notes.md")

            context = json.loads(CONTEXT_PATH.read_text(encoding="utf-8"))
            current_tag = context.get("current_tag")
            previous_tag = context.get("previous_tag")
            commits = context.get("commits", [])

            def sanitize(text: str, limit: int = 600) -> str:
                if not text:
                    return ""
                text = text.strip()
                if len(text) <= limit:
                    return text
                return text[: limit - 3].rstrip() + "..."

            commit_lines = []
            for entry in commits[:200]:
                subject = sanitize(entry.get("subject", ""))
                body = sanitize(entry.get("body", ""))
                author = entry.get("author", {}) or {}
                date_iso = entry.get("date", "")
                commit_hash = entry.get("commit", "")
                url = f"{REPO_URL}/commit/{commit_hash}"
                author_name = (author.get("name") or "").strip()  # Redact emails before sending to Gemini
                blob = {
                    "subject": subject,
                    "body": body,
                    "author": author_name,
                    "date": date_iso,
                    "url": url,
                }
                commit_lines.append(blob)

            commit_json = json.dumps(commit_lines, indent=2)

            instructions = f"""
            Draft release notes for the AniBridge project.

            Repository: {REPO_URL}
            Current release tag: {current_tag}
            Previous release tag: {previous_tag or "none"}

            Follow this structure exactly:
            1. Start with a concise, single-paragraph summary (no heading) describing the overall release.
            2. Add a section titled "Breaking Changes". If there are none, write "Breaking Changes" followed by "None." on the next line.
            3. Add a section titled "New Features". If there are none, state that explicitly.
            4. Add a section titled "Other Changes". Include remaining noteworthy updates or say "None." if empty.

            Section formatting rules:
            - Use Markdown headings (`## Heading`) for "Breaking Changes", "New Features", and "Other Changes".
            - Inside each section, list items as bullet points.
            - Each bullet should cite the related commit using a Markdown link with the pattern `[short description](commit_url)`. Prefer the commit subject as the description.
            - When possible, group multiple commits from the same theme into a single bullet referencing multiple links.
            - Mention authors or additional context when the commit message alone is ambiguous.

            Commit data (JSON list of objects with subject, body, author, date, and url):
            {commit_json}
            """

            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": textwrap.dedent(instructions).strip()
                            }
                        ]
                    }
                ]
            }

            api_key = os.environ["GEMINI_API_KEY"]
            base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"
            request_data = json.dumps(payload).encode("utf-8")
            request = urllib.request.Request(
                url=f"{base_url}?key={api_key}",
                data=request_data,
                headers={"Content-Type": "application/json"},
                method="POST",
            )

            try:
                with urllib.request.urlopen(request, timeout=60) as response:
                    response_body = response.read()
            except Exception as exc:  # pragma: no cover - network failure handling
                raise SystemExit(f"Gemini API request failed: {exc}") from exc

            response_json = json.loads(response_body.decode("utf-8"))

            candidates = response_json.get("candidates") or []
            if not candidates:
                raise SystemExit(f"Gemini API returned no candidates: {response_json}")

            parts = candidates[0].get("content", {}).get("parts") or []
            generated_text = ""
            for part in parts:
                if "text" in part:
                    generated_text += part["text"]

            generated_text = generated_text.strip()
            if not generated_text:
                raise SystemExit("Gemini API returned empty release notes.")

            OUTPUT_PATH.write_text(generated_text + "\n", encoding="utf-8")

            summary_path_value = os.environ.get("GITHUB_STEP_SUMMARY")
            if summary_path_value:
                summary_path = Path(summary_path_value)
                summary_path.write_text(
                    "# Release Notes Preview\n\n" + generated_text + "\n",
                    encoding="utf-8",
                )
            PY

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

  build-python-dists:
    runs-on: ubuntu-latest
    needs: generate-release-notes
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: release-notes
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install build tools
        run: python -m pip install --upgrade pip build
      - name: Build distributions
        run: python -m build
      - name: Create checksums
        run: |
          cd dist && sha256sum * > SHA256SUMS
      - name: Upload Python dists
        uses: softprops/action-gh-release@v1
        with:
          files: "dist/*"
          body_path: release-notes/release-notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pyinstaller-builds:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Build single-file binary (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --additional-hooks-dir hooks --onefile app/main.py --name anibridge
          mkdir -p artifacts
          mv dist/anibridge artifacts/ || true

      - name: Package artifact (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          version=$(cat VERSION | tr -d ' \n\r')
          tar -czf release/anibridge-${{ matrix.os }}-${version}.tar.gz -C artifacts . || true
          ls -la release || true

      - name: Install dependencies (windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Build single-file binary (windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pyinstaller --additional-hooks-dir hooks --onefile app\main.py --name anibridge.exe
          New-Item -ItemType Directory -Force -Path artifacts
          Move-Item -Path dist\anibridge.exe -Destination artifacts\anibridge.exe -ErrorAction SilentlyContinue

      - name: Package artifact (windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          $v = (Get-Content VERSION -Raw).Trim()
          Compress-Archive -Path artifacts\* -DestinationPath (Join-Path -Path release -ChildPath "anibridge-windows-$v.zip") -Force
          Get-ChildItem release
      - name: Upload binaries
        uses: softprops/action-gh-release@v1
        with:
          files: "release/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
